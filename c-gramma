%token int_const char_const float_const id string enumeration_const
%%

translation_unit	: external_decl
			| translation_unit external_decl
			;

external_decl		: function_definition
			| decl
			;

function_definition	: decl_specs declarator decl_list compound_stat
			| declarator 	decl_list 	compound_stat
			| decl_specs 	declarator	compound_stat
			| declarator 				compound_stat
			;

decl			: decl_specs init_declarator_list ';'
			| decl_specs ';'
			;

decl_list		: decl
			| decl_list decl
			;

decl_specs		: storage_class_spec decl_specs
			| storage_class_spec
			| type_spec decl_specs
			| type_spec
			| type_qualifier decl_specs
			| type_qualifier
			;

//-------- Исключаем все классы памяти кроме typedef			
storage_class_spec	: 'typedef'
			;
//-------- Исключаем все базовые типы кроме :
type_spec		: 'void' 
			| 'char' 
			| 'int' 
			| 'float' 
			| struct_spec
			| typedef_name
			;

//------- Исключаем квалификатор типа 'volatile'		
type_qualifier		: 'const' 
			;

struct_spec	: 'struct' id '{' struct_decl_list '}'
			| 'struct'	'{' struct_decl_list '}'
			| 'struct' id
			;

struct_decl_list	: struct_decl
			| struct_decl_list struct_decl
			;

init_declarator_list	: init_declarator
			| init_declarator_list ',' init_declarator
			;

init_declarator		: declarator
			| declarator '=' initializer
			;

struct_decl		: spec_qualifier_list struct_declarator_list ';'
			;

spec_qualifier_list	: type_spec spec_qualifier_list
			| type_spec
			| type_qualifier spec_qualifier_list
			| type_qualifier
			;

struct_declarator_list	: struct_declarator
			| struct_declarator_list ',' struct_declarator
			;

//------- Исключаем определение размера поля (битового поля) в структурах
struct_declarator	: declarator
			;

//------- Исключаем enum

//------- Исключаем union

declarator		: pointer direct_declarator
			|	direct_declarator
			;

direct_declarator	: id
			| '(' declarator ')'
			| direct_declarator '[' const_exp ']'
			| direct_declarator '['		']'
			| direct_declarator '(' param_type_list ')'
			| direct_declarator '(' id_list ')'
			| direct_declarator '('		')'
			;

pointer			: '*' type_qualifier_list
			| '*'
			| '*' type_qualifier_list pointer
			| '*'			pointer
			;

type_qualifier_list	: type_qualifier
			| type_qualifier_list type_qualifier
			;

//------- Исключаем ... из списка параметров функции		
param_type_list		: param_list
			;

param_list		: param_decl
			| param_list ',' param_decl
			;

param_decl		: decl_specs declarator
			| decl_specs abstract_declarator
			| decl_specs
			;

id_list			: id
			| id_list ',' id
			;

initializer		: assignment_exp
			| '{' initializer_list '}'
			| '{' initializer_list ',' '}'
			;

initializer_list	: initializer
			| initializer_list ',' initializer
			;

type_name		: spec_qualifier_list abstract_declarator
			| spec_qualifier_list
			;

abstract_declarator	: pointer
			| pointer direct_abstract_declarator
			|	direct_abstract_declarator
			;

direct_abstract_declarator: '(' abstract_declarator ')'
			| direct_abstract_declarator '[' const_exp ']'
			|				'[' const_exp ']'
			| direct_abstract_declarator '['	']'
			|				'['	']'
			| direct_abstract_declarator '(' param_type_list ')'
			|				'(' param_type_list ')'
			| direct_abstract_declarator '('		')'
			|				'('		')'
			;

typedef_name		: id
			;

------------------------------- stmt -----------------------------

//------- Исключаем помеченные инструкции
stat			: exp_stat
			| compound_stat
			| selection_stat
			| iteration_stat
			| jump_stat
			;

exp_stat		: exp ';'
			|	';'
			;
compound_stat		: '{' decl_list stat_list '}'
			| '{'		stat_list '}'
			| '{' decl_list		'}'
			| '{'			'}'
			;
stat_list		: stat
			| stat_list stat
			;

//-------- Исключаем switch
selection_stat		: 'if' '(' exp ')' stat
			| 'if' '(' exp ')' stat 'else' stat

			;

iteration_stat		: 'while' '(' exp ')' stat
			| 'do' stat 'while' '(' exp ')' ';'
			| 'for' '(' exp ';' exp ';' exp ')' stat
			| 'for' '(' exp ';' exp ';'	')' stat
			| 'for' '(' exp ';'	';' exp ')' stat
			| 'for' '(' exp ';'	';'	')' stat
			| 'for' '('	';' exp ';' exp ')' stat
			| 'for' '('	';' exp ';'	')' stat
			| 'for' '('	';'	';' exp ')' stat
			| 'for' '('	';'	';'	')' stat
			;

//------- Исключаем goto

jump_stat		: 'continue' ';'
			| 'break' ';'
			| 'return' exp ';'
			| 'return'	';'
			;

-------------------------------- exp ----------------------------

exp			: assignment_exp
			| exp ',' assignment_exp
			;

assignment_exp		: conditional_exp
			| unary_exp assignment_operator assignment_exp
			;

assignment_operator	: '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<='
			| '>>=' | '&=' | '^=' | '|='
			;

conditional_exp		: logical_or_exp
			| logical_or_exp '?' exp ':' conditional_exp
			;

const_exp		: conditional_exp
			;

logical_or_exp		: logical_and_exp
			| logical_or_exp '||' logical_and_exp
			;

logical_and_exp		: inclusive_or_exp
			| logical_and_exp '&&' inclusive_or_exp
			;

inclusive_or_exp	: exclusive_or_exp
			| inclusive_or_exp '|' exclusive_or_exp
			;

exclusive_or_exp	: and_exp
			| exclusive_or_exp '^' and_exp
			;

and_exp			: equality_exp
			| and_exp '&' equality_exp
			;

equality_exp		: relational_exp
			| equality_exp '==' relational_exp
			| equality_exp '!=' relational_exp
			;

relational_exp		: shift_expression
			| relational_exp '<' shift_expression
			| relational_exp '>' shift_expression
			| relational_exp '<=' shift_expression
			| relational_exp '>=' shift_expression
			;

shift_expression	: additive_exp
			| shift_expression '<<' additive_exp
			| shift_expression '>>' additive_exp
			;

additive_exp		: mult_exp
			| additive_exp '+' mult_exp
			| additive_exp '-' mult_exp
			;

mult_exp		: cast_exp
			| mult_exp '*' cast_exp
			| mult_exp '/' cast_exp
			| mult_exp '%' cast_exp
			;

//------- Изменение в синтаксисе приведения к типу 'int(x)' вместо '(int)x'
cast_exp		: unary_exp
			|  type_name  '(' cast_exp ')'
			;

unary_exp		: postfix_exp
			| '++' unary_exp
			| '--' unary_exp
			| unary_operator cast_exp
			| 'sizeof' unary_exp
			| 'sizeof' '(' type_name ')'
			;

unary_operator		: '&' | '*' | '+' | '-' | '~' | '!'
			;

postfix_exp		: primary_exp
			| postfix_exp '[' exp ']'
			| postfix_exp '(' argument_exp_list ')'
			| postfix_exp '('')'
			| postfix_exp '.' id
			| postfix_exp '->' id
			| postfix_exp '++'
			| postfix_exp '--'
			;

argument_exp_list	: assignment_exp
			| argument_exp_list ',' assignment_exp
			;

primary_exp		: id
			| const
			| string
			| '(' exp ')'
			;

//-------- Исключаем константу-перечисления
const			: int_const
			| char_const
			| float_const
			;
